run:
  concurrency: 4
  issues-exit-code: 1
  tests: false
  skip-dirs-use-default: false

linters:
  enable-all: true
  disable:
    - godox
    - ireturn
    - goerr113
    - exhaustruct
    - gci
    - gofumpt
    - prealloc
    - nilerr
    - nlreturn
    - tagliatelle
    - varnamelen
    - wrapcheck
    - gomnd
    - wsl
    - bodyclose
    - unparam
    - lll
    - gochecknoglobals
    - gochecknoinits
    - dupl
    - structcheck
    - golint
    - deadcode
    - maligned
    - exhaustivestruct
    - ifshort
    - interfacer
    - nosnakecase
    - scopelint
    - varcheck

output:
  sort-results: true
  format: colored-tab
  print-linter-name: true
  print-issued-lines: true

linters-settings:
  tagalign:
    # Align and sort can be used together or separately.
    #
    # Whether enable align. If true, the struct tags will be aligned.
    # eg:
    # type FooBar struct {
    #     Bar    string `json:"bar" validate:"required"`
    #     FooFoo int8   `json:"foo_foo" validate:"required"`
    # }
    # will be formatted to:
    # type FooBar struct {
    #     Bar    string `json:"bar"     validate:"required"`
    #     FooFoo int8   `json:"foo_foo" validate:"required"`
    # }
    align: false
    # Whether enable tags sort.
    # If true, the tags will be sorted by name in ascending order.
    # eg: `xml:"bar" json:"bar" validate:"required"` -> `json:"bar" validate:"required" xml:"bar"`
    sort: true
    # Specify the order of tags, the other tags will be sorted by name.
    # This option will be ignored if `sort` is false.
    order:
      - json
      - yaml
      - yml
      - toml
      - mapstructure
      - binding
      - validate
      - env
      - envDefault
    # Whether enable strict style.
    # In this style, the tags will be sorted and aligned in the dictionary order,
    # and the tags with the same name will be aligned together.
    # Note: This option will be ignored if 'align' or 'sort' is false.
    strict: true
  errcheck:
    # report about not checking of errors in type assetions: `a := b.(MyStruct)`;
    # default is false: such cases aren't reported by default.
    check-type-assertions: false

    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    # default is false: such cases aren't reported by default.
    check-blank: false
  govet:
    # report about shadowed variables
    check-shadowing: true
  goimports:
    local-prefixes: "github.com/prettyirrelevant"
  golint:
    min-confidence: 0.8
  gofmt:
    simplify: true
  gocyclo:
    min-complexity: 15
  maligned:
    suggest-new: true
  dupl:
    threshold: 150
  goconst:
    min-len: 3
    min-occurrences: 3
  misspell:
    locale: US
  lll:
    line-length: 140
    tab-width: 1
  unused:
    # Mark all exported identifiers as used.
    # this currently raises error https://github.com/dominikh/go-tools/issues/1361
    # exported-is-used: false
    # Mark all exported fields as used.
    exported-fields-are-used: false
    # # Mark all function parameters as used.
    parameters-are-used: false
    # # Mark all local variables as used.
    local-variables-are-used: false
  unparam:
    # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
    # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false
  nakedret:
    # make an issue if func has more lines of code than this setting and it has naked returns; default is 30
    max-func-lines: 30
  prealloc:
    # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
    # True by default.
    simple: true
    range-loops: true # Report preallocation suggestions on range loops, true by default
    for-loops: false # Report preallocation suggestions on for loops, false by default
  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks:
      - unnamedResult
      - wrapperFunc
      - dupImport # https://github.com/go-critic/go-critic/issues/845
      - ifElseChain
      - octalLiteral
  funlen:
    lines: 100
    statements: 50

  depguard:
    rules:
      main:
        files:
          - $all
        allow:
          - $gostd
          - github.com/prettyirrelevant
          - github.com/gofiber
          - github.com/redis
          - github.com/imroc/req/v3
          - github.com/caarlos0/env/v10
          - github.com/joho/godotenv/autoload
          - github.com/docker/docker
          - github.com/jackc/pgx
          - github.com/lithammer/shortuuid/v4


issues:
  new: false
  exclude-use-default: true
  exclude-rules:
  - linters:
      - gocritic
    text: "commentedOutCode:"

  - linters:
      - gocritic
    text: "importShadow:"

  - linters:
      - govet
    text: "shadow:"

  - linters:
      - gosimple
    text: "S1005:"
